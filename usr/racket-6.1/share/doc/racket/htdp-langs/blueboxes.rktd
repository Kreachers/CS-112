58249
((3) 0 () 5 ((q lib "lang/htdp-intermediate.rkt") (q lib "lang/htdp-intermediate-lambda.rkt") (q lib "lang/htdp-beginner-abbr.rkt") (q lib "lang/htdp-advanced.rkt") (q lib "lang/htdp-beginner.rkt")) () (h ! (equal) ((c def c (c (? . 0) q char>=?)) q (36946 . 5)) ((c form c (c (? . 0) q or)) q (28232 . 2)) ((c def c (c (? . 1) q inexact->exact)) q (45930 . 3)) ((c def c (c (? . 2) q modulo)) q (17686 . 4)) ((c def c (c (? . 1) q string-ci<?)) q (53578 . 5)) ((c def c (c (? . 0) q cdddr)) q (33694 . 3)) ((c def c (c (? . 4) q complex?)) q (2517 . 3)) ((c def c (c (? . 3) q fourth)) q (65462 . 3)) ((c def c (c (? . 2) q string-lower-case?)) q (25251 . 3)) ((c def c (c (? . 0) q ormap)) q (42058 . 4)) ((c def c (c (? . 0) q rest)) q (35191 . 3)) ((c def c (c (? . 0) q cddar)) q (33646 . 3)) ((c def c (c (? . 3) q real?)) q (63160 . 3)) ((c def c (c (? . 1) q boolean=?)) q (47933 . 4)) ((c def c (c (? . 3) q remove)) q (66450 . 4)) ((c def c (c (? . 1) q make-list)) q (49891 . 4)) ((c def c (c (? . 2) q eof)) q (26478 . 2)) ((c def c (c (? . 0) q string<?)) q (39321 . 5)) ((c def c (c (? . 0) q magnitude)) q (30956 . 3)) ((c def c (c (? . 1) q char-lower-case?)) q (51764 . 3)) ((c def c (c (? . 0) q denominator)) q (30006 . 3)) ((c def c (c (? . 2) q memv)) q (21234 . 4)) ((c def c (c (? . 4) q char-whitespace?)) q (9338 . 3)) ((c def c (c (? . 2) q acos)) q (15861 . 3)) ((c def c (c (? . 0) q string->symbol)) q (37899 . 3)) ((c def c (c (? . 4) q char?)) q (9861 . 3)) ((c def c (c (? . 4) q number->string)) q (4177 . 3)) ((c form c (c (? . 3) q and)) q (59386 . 2)) ((c def c (c (? . 1) q memq)) q (50114 . 4)) ((c def c (c (? . 2) q char-lower-case?)) q (22745 . 3)) ((c def c (c (? . 4) q string->list)) q (10489 . 3)) ((c def c (c (? . 4) q third)) q (8164 . 3)) ((c def c (c (? . 0) q list)) q (34257 . 3)) ((c def c (c (? . 0) q /)) q (40787 . 4)) ((c def c (c (? . 1) q filter)) q (56865 . 4)) ((c def c (c (? . 2) q sin)) q (18598 . 3)) ((c def c (c (? . 3) q vector-ref)) q (75245 . 4)) ((c def c (c (? . 4) q string->symbol)) q (10629 . 3)) ((c def c (c (? . 2) q string-ci=?)) q (24662 . 5)) ((c form c (c (? . 3) q Î»)) q (57966 . 2)) ((c def c (c (? . 3) q char-alphabetic?)) q (67250 . 3)) ((c def c (c (? . 3) q with-output-to-string)) q (74710 . 3)) ((c def c (c (? . 4) q make-rectangular)) q (3836 . 4)) ((c def c (c (? . 0) q floor)) q (30365 . 3)) ((c def c (c (? . 4) q rest)) q (7921 . 3)) ((c form c (c (? . 2) q check-random)) q (14463 . 2)) ((c def c (c (? . 1) q substring)) q (55163 . 5)) ((c def c (c (? . 1) q fourth)) q (49537 . 3)) ((c def c (c (? . 3) q cosh)) q (61124 . 3)) ((c def c (c (? . 3) q hash-update)) q (76693 . 5)) ((c def c (c (? . 2) q null)) q (21314 . 2)) ((c def c (c (? . 2) q format)) q (23613 . 4)) ((c def c (c (? . 4) q cddr)) q (6521 . 3)) ((c def c (c (? . 4) q remove)) q (7853 . 4)) ((c def c (c (? . 1) q /)) q (56175 . 4)) ((c def c (c (? . 2) q string->int)) q (24071 . 3)) ((c form c (c (? . 4) q check-error)) q (941 . 3)) ((c def c (c (? . 2) q list-ref)) q (20799 . 4)) ((c def c (c (? . 1) q andmap)) q (56246 . 4)) ((c def c (c (? . 3) q char-ci=?)) q (67502 . 5)) ((c def c (c (? . 2) q exact->inexact)) q (16532 . 3)) ((c def c (c (? . 2) q asin)) q (16007 . 3)) ((c def c (c (? . 2) q cons?)) q (20319 . 3)) ((c def c (c (? . 0) q string-ref)) q (39009 . 4)) ((c form c (c (? . 4) q check-random)) q (824 . 2)) ((c form c (c (? . 1) q ..)) q (42473 . 2)) ((c def c (c (? . 2) q eof-object?)) q (26504 . 3)) ((c def c (c (? . 4) q string-upper-case?)) q (11820 . 3)) ((c def c (c (? . 4) q string>=?)) q (12251 . 5)) ((c def c (c (? . 0) q caadr)) q (33170 . 3)) ((c def c (c (? . 2) q char->integer)) q (22096 . 3)) ((c def c (c (? . 4) q cadddr)) q (6092 . 3)) ((c form c (c (? . 0) q time)) q (27398 . 2)) ((c def c (c (? . 3) q foldr)) q (73449 . 5)) ((c def c (c (? . 1) q seventh)) q (50724 . 3)) ((c def c (c (? . 0) q caar)) q (33218 . 3)) ((c def c (c (? . 0) q third)) q (35434 . 3)) ((c def c (c (? . 0) q char-lower-case?)) q (36376 . 3)) ((c def c (c (? . 3) q string-upper-case?)) q (70556 . 3)) ((c def c (c (? . 1) q char-upper-case?)) q (51935 . 3)) ((c def c (c (? . 3) q hash-equal?)) q (75824 . 3)) ((c def c (c (? . 4) q round)) q (4837 . 3)) ((c def c (c (? . 0) q exp)) q (30248 . 3)) ((c def c (c (? . 1) q sqrt)) q (47735 . 3)) ((c def c (c (? . 1) q rational?)) q (47233 . 3)) ((c form c (c (? . 1) q check-member-of)) q (43928 . 2)) ((c def c (c (? . 4) q string-ci>?)) q (11230 . 5)) ((c def c (c (? . 0) q zero?)) q (32493 . 3)) ((c def c (c (? . 0) q eof-object?)) q (40135 . 3)) ((c def c (c (? . 0) q boolean?)) q (32625 . 3)) ((c def c (c (? . 2) q max)) q (17552 . 4)) ((c def c (c (? . 2) q int->string)) q (23739 . 3)) ((c def c (c (? . 3) q true)) q (57812 . 2)) ((c def c (c (? . 1) q apply)) q (56335 . 5)) ((c def c (c (? . 1) q ceiling)) q (45097 . 3)) ((c def c (c (? . 1) q compose)) q (56781 . 4)) ((c def c (c (? . 3) q make-posn)) q (66809 . 4)) ((c def c (c (? . 3) q hash-eqv?)) q (75880 . 3)) ((c def c (c (? . 1) q exact?)) q (45583 . 3)) ((c def c (c (? . 2) q pi)) q (18038 . 2)) ((c def c (c (? . 3) q integer-sqrt)) q (61928 . 3)) ((c def c (c (? . 1) q lcm)) q (46220 . 4)) ((c def c (c (? . 2) q >=)) q (15729 . 5)) ((c form c (c (? . 3) q check-member-of)) q (59748 . 2)) ((c form c (c (? . 1) q and)) q (43566 . 2)) ((c def c (c (? . 1) q range)) q (50404 . 5)) ((c def c (c (? . 1) q quotient)) q (47104 . 4)) ((c def c (c (? . 3) q third)) q (66761 . 3)) ((c def c (c (? . 1) q string=?)) q (54809 . 5)) ((c def c (c (? . 3) q string-lower-case?)) q (70348 . 3)) ((c def c (c (? . 0) q acos)) q (29465 . 3)) ((c def c (c (? . 3) q angle)) q (60771 . 3)) ((c def c (c (? . 2) q cddr)) q (20160 . 3)) ((c def c (c (? . 0) q -)) q (28907 . 4)) ((c def c (c (? . 2) q assq)) q (19458 . 4)) ((c form c (c (? . 3) q when)) q (58670 . 2)) ((c def c (c (? . 2) q string-ci<?)) q (24559 . 5)) ((c def c (c (? . 2) q gcd)) q (16810 . 4)) ((c def c (c (? . 0) q pi)) q (31642 . 2)) ((c def c (c (? . 4) q -)) q (1573 . 4)) ((c def c (c (? . 2) q char<?)) q (23131 . 5)) ((c def c (c (? . 3) q conjugate)) q (61022 . 3)) ((c def c (c (? . 2) q posn?)) q (22045 . 3)) ((c form c (c (? . 4) q ..)) q (72 . 2)) ((c def c (c (? . 0) q caddr)) q (33362 . 3)) ((c def c (c (? . 1) q replicate)) q (52953 . 4)) ((c def c (c (? . 2) q fourth)) q (20567 . 3)) ((c def c (c (? . 1) q numerator)) q (46920 . 3)) ((c def c (c (? . 0) q tan)) q (32445 . 3)) ((c form c (c (? . 3) q check-expect)) q (59493 . 2)) ((c def c (c (? . 4) q string-lower-case?)) q (11612 . 3)) ((c def c (c (? . 3) q string->list)) q (69225 . 3)) ((c def c (c (? . 1) q make-polar)) q (46396 . 4)) ((c def c (c (? . 3) q string-append)) q (69489 . 3)) ((c def c (c (? . 1) q boolean?)) q (48013 . 3)) ((c def c (c (? . 3) q eof)) q (71627 . 2)) ((c def c (c (? . 1) q current-seconds)) q (45353 . 2)) ((c def c (c (? . 3) q posn-y)) q (66957 . 3)) ((c form c (c (? . 0) q check-within)) q (28395 . 2)) ((c def c (c (? . 4) q identity)) q (13313 . 3)) ((c def c (c (? . 0) q lcm)) q (30832 . 4)) ((c def c (c (? . 2) q eq?)) q (26561 . 4)) ((c def c (c (? . 3) q printf)) q (74356 . 4)) ((c def c (c (? . 0) q substring)) q (39775 . 5)) ((c def c (c (? . 2) q string-ith)) q (25111 . 4)) ((c def c (c (? . 0) q explode)) q (37182 . 3)) ((c def c (c (? . 4) q *)) q (1391 . 5)) ((c def c (c (? . 0) q false?)) q (32679 . 3)) ((c def c (c (? . 4) q range)) q (7746 . 5)) ((c def c (c (? . 4) q second)) q (8017 . 3)) ((c def c (c (? . 3) q round)) q (63288 . 3)) ((c def c (c (? . 3) q quotient)) q (62924 . 4)) ((c def c (c (? . 0) q remainder)) q (32003 . 4)) ((c def c (c (? . 4) q char-upper-case?)) q (9277 . 3)) ((c def c (c (? . 0) q quotient)) q (31716 . 4)) ((c def c (c (? . 4) q format)) q (9974 . 4)) ((c def c (c (? . 3) q hash-ref)) q (76196 . 4)) ((c def c (c (? . 3) q cddr)) q (65047 . 3)) ((c def c (c (? . 3) q image?)) q (71423 . 3)) ((c def c (c (? . 1) q image?)) q (55345 . 3)) ((c form c (c (? . 0) q let*)) q (27289 . 2)) ((c def c (c (? . 1) q string-ci>=?)) q (53784 . 5)) ((c def c (c (? . 4) q caar)) q (5997 . 3)) ((c form c (c (? . 2) q unquote)) q (13720 . 2)) ((c def c (c (? . 4) q cdar)) q (6378 . 3)) ((c def c (c (? . 1) q empty)) q (42401 . 2)) ((c def c (c (? . 2) q exit)) q (26925 . 2)) ((c def c (c (? . 0) q angle)) q (29563 . 3)) ((c def c (c (? . 3) q build-list)) q (73008 . 4)) ((c def c (c (? . 3) q rational?)) q (63053 . 3)) ((c def c (c (? . 0) q char-downcase)) q (36322 . 3)) ((c def c (c (? . 2) q char>=?)) q (23315 . 5)) ((c def c (c (? . 3) q hash-set)) q (76509 . 5)) ((c def c (c (? . 2) q sinh)) q (18646 . 3)) ((c form c (c (? . 1) q unquote-splicing)) q (43243 . 2)) ((c def c (c (? . 0) q range)) q (35016 . 5)) ((c def c (c (? . 0) q string-ci<=?)) q (38086 . 5)) ((c def c (c (? . 4) q not)) q (5488 . 3)) ((c def c (c (? . 3) q char-numeric?)) q (67903 . 3)) ((c def c (c (? . 0) q exit)) q (40556 . 2)) ((c form c (c (? . 0) q unquote-splicing)) q (27646 . 2)) ((c def c (c (? . 0) q numerator)) q (31532 . 3)) ((c form c (c (? . 3) q check-range)) q (59814 . 2)) ((c def c (c (? . 2) q denominator)) q (16402 . 3)) ((c def c (c (? . 3) q string<?)) q (70787 . 5)) ((c def c (c (? . 2) q cdddr)) q (20112 . 3)) ((c def c (c (? . 3) q min)) q (62431 . 4)) ((c def c (c (? . 0) q sinh)) q (32250 . 3)) ((c def c (c (? . 2) q true)) q (13438 . 2)) ((c def c (c (? . 1) q fifth)) q (49441 . 3)) ((c def c (c (? . 2) q error)) q (26872 . 3)) ((c def c (c (? . 2) q reverse)) q (21607 . 3)) ((c def c (c (? . 3) q foldl)) q (73351 . 5)) ((c def c (c (? . 4) q char=?)) q (9584 . 5)) ((c def c (c (? . 4) q char<?)) q (9492 . 5)) ((c def c (c (? . 3) q string-numeric?)) q (70413 . 3)) ((c def c (c (? . 0) q remove)) q (35123 . 4)) ((c def c (c (? . 3) q acos)) q (60673 . 3)) ((c def c (c (? . 0) q char<?)) q (36762 . 5)) ((c def c (c (? . 0) q format)) q (37244 . 4)) ((c def c (c (? . 4) q symbol?)) q (5674 . 3)) ((c def c (c (? . 1) q rest)) q (50579 . 3)) ((c def c (c (? . 3) q implode)) q (68785 . 3)) ((c def c (c (? . 0) q string-alphabetic?)) q (37958 . 3)) ((c form c (c (? . 2) q check-within)) q (14518 . 2)) ((c def c (c (? . 3) q char-ci>=?)) q (67597 . 5)) ((c def c (c (? . 1) q eq?)) q (55580 . 4)) ((c def c (c (? . 3) q caadr)) q (64475 . 3)) ((c def c (c (? . 3) q char->integer)) q (67193 . 3)) ((c def c (c (? . 1) q caadr)) q (48558 . 3)) ((c form c (c (? . 4) q or)) q (716 . 2)) ((c def c (c (? . 0) q caaar)) q (33122 . 3)) ((c def c (c (? . 4) q e)) q (2823 . 2)) ((c def c (c (? . 4) q pi)) q (4399 . 2)) ((c def c (c (? . 3) q procedure?)) q (73927 . 3)) ((c def c (c (? . 1) q number?)) q (46867 . 3)) ((c def c (c (? . 2) q tan)) q (18841 . 3)) ((c def c (c (? . 0) q cdar)) q (33599 . 3)) ((c def c (c (? . 4) q string->int)) q (10432 . 3)) ((c def c (c (? . 1) q atan)) q (45048 . 3)) ((c def c (c (? . 3) q car)) q (64762 . 3)) ((c def c (c (? . 1) q floor)) q (45753 . 3)) ((c def c (c (? . 2) q posn-y)) q (21999 . 3)) ((c def c (c (? . 1) q positive?)) q (47048 . 3)) ((c def c (c (? . 4) q string)) q (10377 . 3)) ((c def c (c (? . 3) q =~)) q (71475 . 5)) ((c def c (c (? . 3) q sqr)) q (63507 . 3)) ((c def c (c (? . 3) q print)) q (74311 . 3)) ((c def c (c (? . 0) q positive?)) q (31660 . 3)) ((c def c (c (? . 1) q length)) q (49586 . 3)) ((c def c (c (? . 1) q string-lower-case?)) q (54270 . 3)) ((c def c (c (? . 3) q struct?)) q (72336 . 3)) ((c def c (c (? . 0) q cadr)) q (33410 . 3)) ((c def c (c (? . 3) q hash-has-key?)) q (76025 . 4)) ((c def c (c (? . 4) q <)) q (1735 . 5)) ((c def c (c (? . 2) q sub1)) q (18792 . 3)) ((c def c (c (? . 0) q posn-y)) q (35630 . 3)) ((c def c (c (? . 2) q +)) q (15121 . 5)) ((c def c (c (? . 4) q char-ci<?)) q (8671 . 5)) ((c def c (c (? . 2) q second)) q (21656 . 3)) ((c def c (c (? . 0) q char-alphabetic?)) q (35784 . 3)) ((c def c (c (? . 4) q memv)) q (7595 . 4)) ((c def c (c (? . 1) q remainder)) q (47391 . 4)) ((c def c (c (? . 2) q memq?)) q (21164 . 4)) ((c def c (c (? . 4) q append)) q (5727 . 5)) ((c def c (c (? . 0) q string-append)) q (38023 . 3)) ((c def c (c (? . 1) q sixth)) q (50774 . 3)) ((c def c (c (? . 0) q error)) q (40503 . 3)) ((c def c (c (? . 1) q imag-part)) q (45878 . 3)) ((c def c (c (? . 4) q member?)) q (7384 . 4)) ((c def c (c (? . 0) q make-string)) q (37483 . 4)) ((c def c (c (? . 1) q not)) q (48119 . 3)) ((c def c (c (? . 3) q equal?)) q (71778 . 4)) ((c def c (c (? . 4) q fifth)) q (6832 . 3)) ((c form c (c (? . 2) q cond)) q (14074 . 5)) ((c def c (c (? . 4) q string<?)) q (12051 . 5)) ((c def c (c (? . 1) q char-alphabetic?)) q (51172 . 3)) ((c def c (c (? . 2) q cdr)) q (20207 . 3)) ((c def c (c (? . 4) q memq?)) q (7525 . 4)) ((c def c (c (? . 3) q imag-part)) q (61698 . 3)) ((c form c (c (? . 0) q ......)) q (27172 . 2)) ((c def c (c (? . 4) q caddr)) q (6141 . 3)) ((c def c (c (? . 3) q symbol=?)) q (64050 . 4)) ((c def c (c (? . 3) q string-ci>?)) q (69966 . 5)) ((c def c (c (? . 4) q exit)) q (13286 . 2)) ((c def c (c (? . 2) q negative?)) q (17760 . 3)) ((c def c (c (? . 2) q string-contains?)) q (24972 . 4)) ((c def c (c (? . 1) q string->int)) q (53090 . 3)) ((c def c (c (? . 3) q char=?)) q (68320 . 5)) ((c def c (c (? . 0) q string-ith)) q (38742 . 4)) ((c def c (c (? . 3) q char>=?)) q (68412 . 5)) ((c def c (c (? . 2) q null?)) q (21334 . 3)) ((c def c (c (? . 0) q atan)) q (29660 . 3)) ((c def c (c (? . 3) q <)) q (60186 . 5)) ((c def c (c (? . 3) q string<=?)) q (70686 . 5)) ((c def c (c (? . 2) q string-ref)) q (25378 . 4)) ((c form c (c (? . 2) q define-struct)) q (13973 . 2)) ((c def c (c (? . 0) q member)) q (34583 . 4)) ((c form c (c (? . 3) q time)) q (58980 . 2)) ((c form c (c (? . 0) q check-random)) q (28340 . 2)) ((c def c (c (? . 4) q list->string)) q (10157 . 3)) ((c def c (c (? . 1) q string-ci>?)) q (53888 . 5)) ((c form c (c (? . 2) q check-error)) q (14580 . 3)) ((c def c (c (? . 0) q add1)) q (29514 . 3)) ((c def c (c (? . 0) q asin)) q (29611 . 3)) ((c def c (c (? . 0) q =~)) q (40009 . 5)) ((c def c (c (? . 2) q conjugate)) q (16210 . 3)) ((c def c (c (? . 0) q sqr)) q (32299 . 3)) ((c def c (c (? . 3) q char<?)) q (68228 . 5)) ((c def c (c (? . 2) q substring)) q (26144 . 5)) ((c def c (c (? . 1) q denominator)) q (45394 . 3)) ((c form c (c (? . 0) q check-expect)) q (28285 . 2)) ((c def c (c (? . 1) q build-list)) q (56615 . 4)) ((c form c (c (? . 3) q cond)) q (59159 . 5)) ((c def c (c (? . 1) q cdddr)) q (49082 . 3)) ((c def c (c (? . 4) q equal?)) q (12990 . 4)) ((c def c (c (? . 1) q cosh)) q (45304 . 3)) ((c def c (c (? . 2) q image=?)) q (26254 . 4)) ((c form c (c (? . 0) q unquote)) q (27597 . 2)) ((c def c (c (? . 4) q string-ith)) q (11472 . 4)) ((c def c (c (? . 2) q caadr)) q (19588 . 3)) ((c def c (c (? . 0) q char-upper-case?)) q (36547 . 3)) ((c def c (c (? . 2) q numerator)) q (17928 . 3)) ((c def c (c (? . 2) q member)) q (20952 . 4)) ((c def c (c (? . 1) q magnitude)) q (46344 . 3)) ((c def c (c (? . 3) q with-input-from-file)) q (74454 . 4)) ((c def c (c (? . 4) q denominator)) q (2763 . 3)) ((c def c (c (? . 3) q string->int)) q (69168 . 3)) ((c form c (c (? . 1) q ...)) q (42483 . 2)) ((c def c (c (? . 2) q eighth)) q (20370 . 3)) ((c def c (c (? . 3) q string-ci<?)) q (69656 . 5)) ((c def c (c (? . 2) q char-upper-case?)) q (22916 . 3)) ((c form c (c (? . 3) q ......)) q (57907 . 2)) ((c def c (c (? . 4) q >)) q (2003 . 5)) ((c def c (c (? . 1) q argmax)) q (56459 . 4)) ((c def c (c (? . 2) q first)) q (20519 . 3)) ((c def c (c (? . 3) q member)) q (65910 . 4)) ((c def c (c (? . 4) q cadr)) q (6189 . 3)) ((c def c (c (? . 3) q add1)) q (60722 . 3)) ((c def c (c (? . 4) q string-whitespace?)) q (11885 . 3)) ((c def c (c (? . 3) q build-string)) q (73091 . 4)) ((c def c (c (? . 0) q char-ci=?)) q (36036 . 5)) ((c def c (c (? . 4) q >=)) q (2090 . 5)) ((c def c (c (? . 3) q memq?)) q (66122 . 4)) ((c def c (c (? . 2) q current-seconds)) q (16361 . 2)) ((c def c (c (? . 0) q cdaar)) q (33503 . 3)) ((c def c (c (? . 0) q sort)) q (42303 . 4)) ((c def c (c (? . 2) q string-ci>?)) q (24869 . 5)) ((c def c (c (? . 3) q gcd)) q (61622 . 4)) ((c def c (c (? . 3) q -)) q (60115 . 4)) ((c def c (c (? . 3) q void?)) q (72417 . 3)) ((c def c (c (? . 3) q make-string)) q (68949 . 4)) ((c form c (c (? . 0) q quasiquote)) q (27526 . 2)) ((c def c (c (? . 2) q string-append)) q (24392 . 3)) ((c def c (c (? . 1) q list?)) q (49842 . 3)) ((c def c (c (? . 2) q even?)) q (16479 . 3)) ((c def c (c (? . 1) q eighth)) q (49340 . 3)) ((c def c (c (? . 3) q box)) q (75460 . 3)) ((c def c (c (? . 3) q abs)) q (60629 . 3)) ((c def c (c (? . 2) q member?)) q (21023 . 4)) ((c def c (c (? . 0) q image?)) q (39957 . 3)) ((c def c (c (? . 4) q cdr)) q (6568 . 3)) ((c form c (c (? . 2) q .....)) q (13520 . 2)) ((c def c (c (? . 2) q string=?)) q (25790 . 5)) ((c form c (c (? . 2) q quote)) q (13577 . 2)) ((c def c (c (? . 4) q fourth)) q (6928 . 3)) ((c def c (c (? . 1) q negative?)) q (46752 . 3)) ((c def c (c (? . 0) q quicksort)) q (42200 . 4)) ((c def c (c (? . 1) q acos)) q (44853 . 3)) ((c form c (c (? . 0) q local)) q (27186 . 2)) ((c def c (c (? . 4) q first)) q (6880 . 3)) ((c def c (c (? . 2) q eqv?)) q (26803 . 4)) ((c form c (c (? . 0) q define-struct)) q (27850 . 2)) ((c def c (c (? . 3) q char<=?)) q (68135 . 5)) ((c def c (c (? . 4) q char-numeric?)) q (9167 . 3)) ((c form c (c (? . 2) q check-expect)) q (14408 . 2)) ((c def c (c (? . 3) q hash-ref!)) q (76265 . 5)) ((c def c (c (? . 3) q asin)) q (60819 . 3)) ((c def c (c (? . 1) q -)) q (44295 . 4)) ((c def c (c (? . 3) q for-each)) q (73547 . 4)) ((c def c (c (? . 0) q append)) q (32970 . 3)) ((c def c (c (? . 0) q string>?)) q (39622 . 5)) ((c def c (c (? . 0) q inexact->exact)) q (30542 . 3)) ((c def c (c (? . 3) q force)) q (72101 . 3)) ((c form c (c (? . 0) q check-error)) q (28457 . 3)) ((c def c (c (? . 3) q positive?)) q (62868 . 3)) ((c def c (c (? . 0) q sin)) q (32202 . 3)) ((c def c (c (? . 4) q exact->inexact)) q (2893 . 3)) ((c def c (c (? . 0) q list?)) q (34454 . 3)) ((c def c (c (? . 2) q string-copy)) q (25055 . 3)) ((c def c (c (? . 2) q symbol=?)) q (19238 . 4)) ((c form c (c (? . 1) q if)) q (43503 . 2)) ((c def c (c (? . 3) q compose)) q (73174 . 4)) ((c form c (c (? . 0) q check-member-of)) q (28540 . 2)) ((c def c (c (? . 2) q real?)) q (18348 . 3)) ((c def c (c (? . 1) q true)) q (42424 . 2)) ((c def c (c (? . 1) q caar)) q (48606 . 3)) ((c def c (c (? . 3) q number?)) q (62687 . 3)) ((c form c (c (? . 0) q ..)) q (27126 . 2)) ((c def c (c (? . 4) q empty)) q (0 . 2)) ((c def c (c (? . 4) q string-ci<?)) q (10920 . 5)) ((c form c (c (? . 2) q quasiquote)) q (13649 . 2)) ((c def c (c (? . 0) q string-ci=?)) q (38293 . 5)) ((c def c (c (? . 1) q sqr)) q (47687 . 3)) ((c def c (c (? . 0) q string)) q (37647 . 3)) ((c def c (c (? . 3) q denominator)) q (61214 . 3)) ((c def c (c (? . 3) q e)) q (61274 . 2)) ((c def c (c (? . 1) q char-numeric?)) q (51825 . 3)) ((c def c (c (? . 3) q cos)) q (61076 . 3)) ((c def c (c (? . 2) q third)) q (21803 . 3)) ((c def c (c (? . 1) q string-upper-case?)) q (54478 . 3)) ((c def c (c (? . 2) q not)) q (19127 . 3)) ((c def c (c (? . 3) q caar)) q (64523 . 3)) ((c def c (c (? . 4) q /)) q (1644 . 5)) ((c form c (c (? . 3) q set!)) q (58210 . 2)) ((c def c (c (? . 4) q caadr)) q (5949 . 3)) ((c def c (c (? . 3) q even?)) q (61291 . 3)) ((c def c (c (? . 1) q char-downcase)) q (51710 . 3)) ((c def c (c (? . 2) q string-whitespace?)) q (25524 . 3)) ((c def c (c (? . 2) q caar)) q (19636 . 3)) ((c def c (c (? . 1) q memf)) q (57343 . 4)) ((c form c (c (? . 4) q .....)) q (105 . 2)) ((c def c (c (? . 3) q int->string)) q (68836 . 3)) ((c def c (c (? . 2) q atan)) q (16056 . 3)) ((c def c (c (? . 3) q make-hasheqv)) q (77031 . 2)) ((c def c (c (? . 2) q number->string)) q (17816 . 3)) ((c def c (c (? . 4) q rational?)) q (4602 . 3)) ((c def c (c (? . 0) q gcd)) q (30414 . 4)) ((c def c (c (? . 2) q make-string)) q (23852 . 4)) ((c form c (c (? . 1) q check-expect)) q (43673 . 2)) ((c def c (c (? . 1) q log)) q (46296 . 3)) ((c def c (c (? . 1) q make-rectangular)) q (46467 . 4)) ((c def c (c (? . 4) q cdddr)) q (6473 . 3)) ((c def c (c (? . 3) q string?)) q (71188 . 3)) ((c def c (c (? . 3) q negative?)) q (62572 . 3)) ((c def c (c (? . 1) q symbol?)) q (48305 . 3)) ((c def c (c (? . 1) q caddr)) q (48750 . 3)) ((c def c (c (? . 0) q sub1)) q (32396 . 3)) ((c def c (c (? . 3) q cadr)) q (64715 . 3)) ((c def c (c (? . 4) q symbol->string)) q (5540 . 3)) ((c def c (c (? . 4) q abs)) q (2178 . 3)) ((c def c (c (? . 3) q map)) q (73644 . 4)) ((c form c (c (? . 2) q define)) q (13807 . 2)) ((c def c (c (? . 2) q char=?)) q (23223 . 5)) ((c def c (c (? . 2) q cosh)) q (16312 . 3)) ((c def c (c (? . 2) q equal~?)) q (26700 . 5)) ((c def c (c (? . 1) q assq)) q (48428 . 4)) ((c def c (c (? . 1) q conjugate)) q (45202 . 3)) ((c def c (c (? . 4) q char-lower-case?)) q (9106 . 3)) ((c def c (c (? . 2) q implode)) q (23688 . 3)) ((c def c (c (? . 3) q string-contains?)) q (70069 . 4)) ((c form c (c (? . 2) q and)) q (14301 . 2)) ((c def c (c (? . 1) q add1)) q (44902 . 3)) ((c def c (c (? . 3) q make-vector)) q (74977 . 4)) ((c def c (c (? . 4) q gcd)) q (3171 . 4)) ((c def c (c (? . 3) q vector->list)) q (75116 . 3)) ((c form c (c (? . 4) q ......)) q (118 . 2)) ((c def c (c (? . 3) q magnitude)) q (62164 . 3)) ((c def c (c (? . 0) q string-numeric?)) q (38947 . 3)) ((c form c (c (? . 3) q define-datatype)) q (58044 . 2)) ((c def c (c (? . 3) q real-part)) q (63108 . 3)) ((c def c (c (? . 4) q string-numeric?)) q (11677 . 3)) ((c def c (c (? . 0) q char=?)) q (36854 . 5)) ((c def c (c (? . 2) q string-length)) q (25196 . 3)) ((c def c (c (? . 1) q max)) q (46544 . 4)) ((c def c (c (? . 4) q string-ci<=?)) q (10816 . 5)) ((c def c (c (? . 0) q string-length)) q (38827 . 3)) ((c def c (c (? . 0) q ceiling)) q (29709 . 3)) ((c form c (c (? . 3) q let)) q (58926 . 2)) ((c def c (c (? . 2) q char-ci>?)) q (22596 . 5)) ((c def c (c (? . 3) q set-posn-x!)) q (67054 . 4)) ((c def c (c (? . 0) q string->number)) q (37824 . 3)) ((c def c (c (? . 4) q string-alphabetic?)) q (10688 . 3)) ((c def c (c (? . 1) q cdadr)) q (48939 . 3)) ((c def c (c (? . 3) q current-milliseconds)) q (71575 . 2)) ((c def c (c (? . 4) q eq?)) q (12922 . 4)) ((c def c (c (? . 4) q eqv?)) q (13164 . 4)) ((c def c (c (? . 2) q make-posn)) q (21851 . 4)) ((c def c (c (? . 1) q sort)) q (57691 . 4)) ((c def c (c (? . 3) q substring)) q (71241 . 5)) ((c def c (c (? . 4) q posn)) q (8282 . 2)) ((c def c (c (? . 2) q log)) q (17304 . 3)) ((c def c (c (? . 2) q odd?)) q (17986 . 3)) ((c def c (c (? . 1) q posn-y)) q (51018 . 3)) ((c def c (c (? . 2) q memq)) q (21095 . 4)) ((c def c (c (? . 3) q append)) q (64178 . 3)) ((c def c (c (? . 2) q list)) q (20675 . 3)) ((c def c (c (? . 1) q complex?)) q (45148 . 3)) ((c def c (c (? . 3) q char-ci<?)) q (67407 . 5)) ((c def c (c (? . 2) q =)) q (15549 . 5)) ((c form c (c (? . 0) q ....)) q (27147 . 2)) ((c def c (c (? . 1) q char->integer)) q (51115 . 3)) ((c form c (c (? . 0) q let)) q (27344 . 2)) ((c form c (c (? . 1) q let*)) q (42791 . 2)) ((c def c (c (? . 3) q assq)) q (64345 . 4)) ((c def c (c (? . 0) q compose)) q (41393 . 4)) ((c def c (c (? . 3) q sinh)) q (63458 . 3)) ((c def c (c (? . 2) q empty?)) q (20419 . 3)) ((c def c (c (? . 4) q even?)) q (2840 . 3)) ((c def c (c (? . 2) q string->list)) q (24128 . 3)) ((c def c (c (? . 3) q sixth)) q (66713 . 3)) ((c def c (c (? . 2) q replicate)) q (23934 . 4)) ((c def c (c (? . 3) q length)) q (65511 . 3)) ((c def c (c (? . 1) q empty?)) q (49389 . 3)) ((c def c (c (? . 4) q string-ci=?)) q (11023 . 5)) ((c def c (c (? . 2) q cons)) q (20253 . 4)) ((c def c (c (? . 2) q char-ci<?)) q (22310 . 5)) ((c def c (c (? . 2) q complex?)) q (16156 . 3)) ((c def c (c (? . 2) q string)) q (24016 . 3)) ((c def c (c (? . 4) q imag-part)) q (3247 . 3)) ((c form c (c (? . 1) q .....)) q (42506 . 2)) ((c def c (c (? . 3) q atan)) q (60868 . 3)) ((c def c (c (? . 1) q asin)) q (44999 . 3)) ((c def c (c (? . 3) q symbol?)) q (64125 . 3)) ((c def c (c (? . 4) q exp)) q (3005 . 3)) ((c def c (c (? . 3) q cdddr)) q (64999 . 3)) ((c def c (c (? . 0) q symbol->string)) q (32783 . 3)) ((c def c (c (? . 0) q string-ci>?)) q (38500 . 5)) ((c form c (c (? . 2) q check-range)) q (14729 . 2)) ((c def c (c (? . 4) q posn-y)) q (8360 . 3)) ((c form c (c (? . 1) q time)) q (42900 . 2)) ((c def c (c (? . 1) q list*)) q (49697 . 4)) ((c form c (c (? . 2) q ....)) q (13508 . 2)) ((c def c (c (? . 2) q inexact->exact)) q (16938 . 3)) ((c def c (c (? . 4) q <=)) q (1822 . 5)) ((c def c (c (? . 3) q sort)) q (74084 . 4)) ((c form c (c (? . 3) q check-error)) q (59665 . 3)) ((c def c (c (? . 1) q char-upcase)) q (51883 . 3)) ((c def c (c (? . 3) q false?)) q (63887 . 3)) ((c def c (c (? . 0) q equal~?)) q (40331 . 5)) ((c def c (c (? . 1) q cddr)) q (49130 . 3)) ((c def c (c (? . 1) q symbol=?)) q (48230 . 4)) ((c form c (c (? . 3) q check-random)) q (59548 . 2)) ((c def c (c (? . 0) q second)) q (35287 . 3)) ((c form c (c (? . 3) q begin0)) q (58165 . 2)) ((c def c (c (? . 0) q exact->inexact)) q (30136 . 3)) ((c def c (c (? . 4) q posn-x)) q (8314 . 3)) ((c def c (c (? . 2) q char-ci=?)) q (22405 . 5)) ((c def c (c (? . 4) q empty?)) q (6780 . 3)) ((c def c (c (? . 1) q exp)) q (45636 . 3)) ((c def c (c (? . 3) q make-immutable-hasheq)) q (77124 . 2)) ((c form c (c (? . 4) q and)) q (662 . 2)) ((c form c (c (? . 1) q check-within)) q (43783 . 2)) ((c def c (c (? . 4) q image=?)) q (12615 . 4)) ((c def c (c (? . 0) q >=)) q (29333 . 5)) ((c def c (c (? . 1) q gcd)) q (45802 . 4)) ((c def c (c (? . 3) q memf)) q (73736 . 4)) ((c def c (c (? . 1) q struct?)) q (56020 . 3)) ((c def c (c (? . 1) q integer-sqrt)) q (46108 . 3)) ((c def c (c (? . 1) q ormap)) q (57446 . 4)) ((c def c (c (? . 0) q eof)) q (40109 . 2)) ((c def c (c (? . 4) q cdadr)) q (6330 . 3)) ((c def c (c (? . 0) q make-list)) q (34503 . 4)) ((c def c (c (? . 2) q min)) q (17619 . 4)) ((c def c (c (? . 0) q length)) q (34198 . 3)) ((c def c (c (? . 0) q make-posn)) q (35482 . 4)) ((c def c (c (? . 3) q cons)) q (65140 . 4)) ((c def c (c (? . 2) q image?)) q (26326 . 3)) ((c def c (c (? . 3) q char>?)) q (68505 . 5)) ((c def c (c (? . 4) q integer?)) q (3535 . 3)) ((c def c (c (? . 3) q eq?)) q (71710 . 4)) ((c def c (c (? . 2) q length)) q (20616 . 3)) ((c def c (c (? . 4) q char-ci<=?)) q (8575 . 5)) ((c def c (c (? . 4) q char-ci>=?)) q (8861 . 5)) ((c def c (c (? . 1) q member?)) q (50042 . 4)) ((c def c (c (? . 2) q string>=?)) q (25890 . 5)) ((c def c (c (? . 3) q make-rectangular)) q (62287 . 4)) ((c def c (c (? . 4) q min)) q (3980 . 4)) ((c form c (c (? . 1) q define-struct)) q (43281 . 2)) ((c def c (c (? . 1) q string-ci<=?)) q (53474 . 5)) ((c def c (c (? . 4) q string?)) q (12452 . 3)) ((c def c (c (? . 1) q abs)) q (44809 . 3)) ((c def c (c (? . 4) q cosh)) q (2673 . 3)) ((c def c (c (? . 0) q +)) q (40736 . 3)) ((c def c (c (? . 3) q +)) q (72517 . 3)) ((c def c (c (? . 0) q procedure?)) q (42146 . 3)) ((c def c (c (? . 3) q list->string)) q (68893 . 3)) ((c def c (c (? . 3) q second)) q (66614 . 3)) ((c def c (c (? . 4) q atan)) q (2417 . 3)) ((c def c (c (? . 2) q cdar)) q (20017 . 3)) ((c form c (c (? . 4) q require)) q (1156 . 2)) ((c def c (c (? . 0) q member?)) q (34654 . 4)) ((c def c (c (? . 3) q tan)) q (63653 . 3)) ((c def c (c (? . 2) q cadddr)) q (19731 . 3)) ((c def c (c (? . 0) q string-ci>=?)) q (38396 . 5)) ((c def c (c (? . 4) q string-ref)) q (11739 . 4)) ((c def c (c (? . 0) q list-ref)) q (34381 . 4)) ((c def c (c (? . 4) q error)) q (13233 . 3)) ((c def c (c (? . 4) q string=?)) q (12151 . 5)) ((c def c (c (? . 4) q odd?)) q (4347 . 3)) ((c def c (c (? . 1) q cons)) q (49223 . 4)) ((c def c (c (? . 1) q real-part)) q (47288 . 3)) ((c def c (c (? . 1) q round)) q (47468 . 3)) ((c def c (c (? . 4) q list)) q (7036 . 3)) ((c def c (c (? . 4) q char>?)) q (9769 . 5)) ((c def c (c (? . 3) q modulo)) q (62498 . 4)) ((c def c (c (? . 0) q cdr)) q (33789 . 3)) ((c def c (c (? . 3) q memq)) q (66053 . 4)) ((c def c (c (? . 3) q null?)) q (66292 . 3)) ((c def c (c (? . 1) q make-posn)) q (50870 . 4)) ((c def c (c (? . 3) q equal~?)) q (71849 . 5)) ((c def c (c (? . 0) q string<=?)) q (39220 . 5)) ((c form c (c (? . 0) q require)) q (28672 . 2)) ((c def c (c (? . 3) q cons?)) q (65214 . 3)) ((c def c (c (? . 1) q random)) q (47180 . 3)) ((c def c (c (? . 0) q fourth)) q (34149 . 3)) ((c def c (c (? . 2) q exp)) q (16644 . 3)) ((c def c (c (? . 4) q string<=?)) q (11950 . 5)) ((c def c (c (? . 3) q list*)) q (65622 . 4)) ((c def c (c (? . 2) q imag-part)) q (16886 . 3)) ((c def c (c (? . 2) q floor)) q (16761 . 3)) ((c def c (c (? . 3) q vector-set!)) q (75317 . 5)) ((c def c (c (? . 4) q struct?)) q (13362 . 3)) ((c def c (c (? . 4) q eof-object?)) q (12865 . 3)) ((c def c (c (? . 4) q sqrt)) q (5104 . 3)) ((c def c (c (? . 1) q zero?)) q (47881 . 3)) ((c def c (c (? . 2) q append)) q (19366 . 5)) ((c def c (c (? . 0) q list->string)) q (37427 . 3)) ((c form c (c (? . 1) q check-range)) q (43994 . 2)) ((c def c (c (? . 3) q posn-x)) q (66911 . 3)) ((c def c (c (? . 0) q expt)) q (30296 . 4)) ((c def c (c (? . 3) q identity)) q (72177 . 3)) ((c def c (c (? . 1) q integer?)) q (46166 . 3)) ((c def c (c (? . 0) q boolean=?)) q (32545 . 4)) ((c def c (c (? . 3) q error)) q (72021 . 3)) ((c def c (c (? . 3) q write)) q (74776 . 3)) ((c def c (c (? . 0) q cosh)) q (29916 . 3)) ((c def c (c (? . 3) q cadar)) q (64570 . 3)) ((c def c (c (? . 1) q even?)) q (45471 . 3)) ((c def c (c (? . 0) q string>=?)) q (39521 . 5)) ((c def c (c (? . 4) q cadar)) q (6044 . 3)) ((c def c (c (? . 2) q false)) q (13462 . 2)) ((c def c (c (? . 1) q sinh)) q (47638 . 3)) ((c def c (c (? . 0) q memf)) q (41955 . 4)) ((c form c (c (? . 1) q Î»)) q (42588 . 2)) ((c def c (c (? . 4) q negative?)) q (4121 . 3)) ((c form c (c (? . 1) q letrec)) q (42734 . 2)) ((c def c (c (? . 1) q car)) q (48845 . 3)) ((c def c (c (? . 3) q box?)) q (75505 . 3)) ((c def c (c (? . 0) q list*)) q (34309 . 4)) ((c def c (c (? . 3) q cdadr)) q (64856 . 3)) ((c def c (c (? . 4) q string-ci>=?)) q (11126 . 5)) ((c def c (c (? . 1) q char-ci<?)) q (51329 . 5)) ((c def c (c (? . 3) q floor)) q (61573 . 3)) ((c form c (c (? . 4) q define)) q (132 . 2)) ((c def c (c (? . 2) q list->string)) q (23796 . 3)) ((c def c (c (? . 3) q string-ci>=?)) q (69862 . 5)) ((c def c (c (? . 4) q equal~?)) q (13061 . 5)) ((c def c (c (? . 2) q make-list)) q (20872 . 4)) ((c def c (c (? . 3) q expt)) q (61504 . 4)) ((c form c (c (? . 1) q ......)) q (42519 . 2)) ((c def c (c (? . 1) q char<=?)) q (52057 . 5)) ((c form c (c (? . 4) q if)) q (599 . 2)) ((c def c (c (? . 1) q memq?)) q (50183 . 4)) ((c def c (c (? . 2) q posn)) q (21921 . 2)) ((c def c (c (? . 1) q null)) q (50333 . 2)) ((c def c (c (? . 3) q cadddr)) q (64618 . 3)) ((c def c (c (? . 0) q number->string)) q (31420 . 3)) ((c def c (c (? . 4) q log)) q (3665 . 3)) ((c def c (c (? . 3) q read)) q (74427 . 2)) ((c def c (c (? . 1) q foldr)) q (57056 . 5)) ((c def c (c (? . 1) q <=)) q (44453 . 5)) ((c def c (c (? . 4) q image?)) q (12687 . 3)) ((c def c (c (? . 0) q real-part)) q (31900 . 3)) ((c def c (c (? . 1) q char-ci=?)) q (51424 . 5)) ((c def c (c (? . 3) q exact?)) q (61403 . 3)) ((c def c (c (? . 3) q char-ci>?)) q (67693 . 5)) ((c def c (c (? . 4) q exact?)) q (2952 . 3)) ((c def c (c (? . 1) q tan)) q (47833 . 3)) ((c def c (c (? . 3) q char-downcase)) q (67788 . 3)) ((c def c (c (? . 0) q exact?)) q (30195 . 3)) ((c def c (c (? . 0) q char<=?)) q (36669 . 5)) ((c def c (c (? . 4) q list-ref)) q (7160 . 4)) ((c def c (c (? . 0) q *)) q (40685 . 3)) ((c def c (c (? . 0) q make-polar)) q (31008 . 4)) ((c def c (c (? . 1) q list)) q (49645 . 3)) ((c def c (c (? . 1) q string-copy)) q (54074 . 3)) ((c def c (c (? . 4) q boolean?)) q (5382 . 3)) ((c form c (c (? . 3) q ..)) q (57861 . 2)) ((c def c (c (? . 2) q char-ci<=?)) q (22214 . 5)) ((c def c (c (? . 4) q boolean=?)) q (5302 . 4)) ((c def c (c (? . 3) q fifth)) q (65366 . 3)) ((c def c (c (? . 0) q not)) q (32731 . 3)) ((c def c (c (? . 0) q posn)) q (35552 . 2)) ((c def c (c (? . 2) q sqr)) q (18695 . 3)) ((c def c (c (? . 1) q third)) q (50822 . 3)) ((c def c (c (? . 3) q with-output-to-file)) q (74626 . 4)) ((c def c (c (? . 1) q symbol->string)) q (48171 . 3)) ((c form c (c (? . 1) q require)) q (44060 . 2)) ((c def c (c (? . 1) q string-length)) q (54215 . 3)) ((c def c (c (? . 0) q cdadr)) q (33551 . 3)) ((c def c (c (? . 4) q ceiling)) q (2466 . 3)) ((c def c (c (? . 0) q current-seconds)) q (29965 . 2)) ((c form c (c (? . 3) q .....)) q (57894 . 2)) ((c def c (c (? . 1) q char<?)) q (52150 . 5)) ((c def c (c (? . 1) q memv)) q (50253 . 4)) ((c def c (c (? . 3) q list)) q (65570 . 3)) ((c def c (c (? . 2) q string>?)) q (25991 . 5)) ((c def c (c (? . 2) q boolean?)) q (19021 . 3)) ((c def c (c (? . 2) q boolean=?)) q (18941 . 4)) ((c def c (c (? . 1) q quicksort)) q (57588 . 4)) ((c def c (c (? . 4) q quotient)) q (4473 . 4)) ((c def c (c (? . 0) q integer?)) q (30778 . 3)) ((c def c (c (? . 1) q for-each)) q (57154 . 4)) ((c def c (c (? . 1) q sub1)) q (47784 . 3)) ((c def c (c (? . 4) q add1)) q (2271 . 3)) ((c def c (c (? . 3) q void)) q (72389 . 2)) ((c def c (c (? . 1) q char-ci>?)) q (51615 . 5)) ((c def c (c (? . 3) q string>=?)) q (70987 . 5)) ((c def c (c (? . 2) q expt)) q (16692 . 4)) ((c def c (c (? . 2) q integer-sqrt)) q (17116 . 3)) ((c def c (c (? . 3) q hash-update!)) q (76800 . 5)) ((c def c (c (? . 2) q string-ci<=?)) q (24455 . 5)) ((c def c (c (? . 1) q eof)) q (55497 . 2)) ((c def c (c (? . 3) q char-upper-case?)) q (68013 . 3)) ((c def c (c (? . 0) q foldr)) q (41668 . 5)) ((c def c (c (? . 4) q =~)) q (12739 . 5)) ((c def c (c (? . 0) q <=)) q (29065 . 5)) ((c def c (c (? . 1) q build-string)) q (56698 . 4)) ((c def c (c (? . 0) q char-ci>?)) q (36227 . 5)) ((c def c (c (? . 4) q max)) q (3913 . 4)) ((c def c (c (? . 4) q +)) q (1482 . 5)) ((c def c (c (? . 4) q sixth)) q (8116 . 3)) ((c def c (c (? . 0) q string-contains?)) q (38603 . 4)) ((c def c (c (? . 3) q string)) q (69113 . 3)) ((c def c (c (? . 4) q cddar)) q (6425 . 3)) ((c def c (c (? . 3) q empty)) q (57789 . 2)) ((c def c (c (? . 0) q empty)) q (27054 . 2)) ((c def c (c (? . 1) q string>?)) q (55010 . 5)) ((c def c (c (? . 4) q lcm)) q (3589 . 4)) ((c def c (c (? . 4) q cons)) q (6614 . 4)) ((c def c (c (? . 3) q =)) q (60361 . 5)) ((c def c (c (? . 3) q member?)) q (65981 . 4)) ((c def c (c (? . 4) q char-ci>?)) q (8957 . 5)) ((c def c (c (? . 3) q pretty-print)) q (74259 . 3)) ((c def c (c (? . 1) q string-ref)) q (54397 . 4)) ((c def c (c (? . 3) q hash-count)) q (75718 . 3)) ((c def c (c (? . 1) q char-whitespace?)) q (51996 . 3)) ((c def c (c (? . 1) q e)) q (45454 . 2)) ((c def c (c (? . 2) q symbol?)) q (19313 . 3)) ((c def c (c (? . 1) q string-ci=?)) q (53681 . 5)) ((c def c (c (? . 3) q boolean?)) q (63833 . 3)) ((c form c (c (? . 1) q lambda)) q (42533 . 2)) ((c def c (c (? . 2) q caddr)) q (19780 . 3)) ((c def c (c (? . 0) q implode)) q (37319 . 3)) ((c form c (c (? . 3) q ...)) q (57871 . 2)) ((c def c (c (? . 4) q integer->char)) q (3413 . 3)) ((c def c (c (? . 3) q string->symbol)) q (69365 . 3)) ((c def c (c (? . 4) q sub1)) q (5153 . 3)) ((c form c (c (? . 4) q ...)) q (82 . 2)) ((c def c (c (? . 0) q map)) q (41863 . 4)) ((c def c (c (? . 0) q conjugate)) q (29814 . 3)) ((c def c (c (? . 1) q error)) q (55891 . 3)) ((c def c (c (? . 4) q conjugate)) q (2571 . 3)) ((c def c (c (? . 0) q fifth)) q (34053 . 3)) ((c def c (c (? . 3) q make-immutable-hasheqv)) q (77176 . 2)) ((c def c (c (? . 1) q integer->char)) q (46044 . 3)) ((c def c (c (? . 1) q char>=?)) q (52334 . 5)) ((c def c (c (? . 0) q foldl)) q (41570 . 5)) ((c def c (c (? . 3) q hash-copy)) q (75668 . 3)) ((c def c (c (? . 4) q number?)) q (4236 . 3)) ((c def c (c (? . 1) q >=)) q (44721 . 5)) ((c def c (c (? . 0) q integer->char)) q (30656 . 3)) ((c def c (c (? . 4) q char<=?)) q (9399 . 5)) ((c form c (c (? . 4) q check-within)) q (879 . 2)) ((c def c (c (? . 0) q struct?)) q (40632 . 3)) ((c def c (c (? . 2) q explode)) q (23551 . 3)) ((c def c (c (? . 3) q odd?)) q (62798 . 3)) ((c form c (c (? . 1) q cond)) q (43339 . 5)) ((c form c (c (? . 1) q ....)) q (42494 . 2)) ((c def c (c (? . 3) q exit)) q (72074 . 2)) ((c def c (c (? . 3) q memv)) q (66192 . 4)) ((c def c (c (? . 3) q caddr)) q (64667 . 3)) ((c def c (c (? . 1) q <)) q (44366 . 5)) ((c def c (c (? . 0) q int->string)) q (37370 . 3)) ((c def c (c (? . 4) q inexact->exact)) q (3299 . 3)) ((c def c (c (? . 3) q string-ci<=?)) q (69552 . 5)) ((c form c (c (? . 3) q unless)) q (58718 . 2)) ((c def c (c (? . 2) q string->number)) q (24193 . 3)) ((c def c (c (? . 4) q floor)) q (3122 . 3)) ((c def c (c (? . 3) q sin)) q (63410 . 3)) ((c def c (c (? . 2) q string-alphabetic?)) q (24327 . 3)) ((c def c (c (? . 1) q foldl)) q (56958 . 5)) ((c def c (c (? . 3) q string->number)) q (69290 . 3)) ((c def c (c (? . 1) q int->string)) q (52758 . 3)) ((c def c (c (? . 3) q pi)) q (62850 . 2)) ((c def c (c (? . 0) q rational?)) q (31845 . 3)) ((c def c (c (? . 3) q set-box!)) q (75555 . 4)) ((c def c (c (? . 0) q eq?)) q (40192 . 4)) ((c def c (c (? . 1) q member)) q (49971 . 4)) ((c def c (c (? . 0) q true)) q (27077 . 2)) ((c def c (c (? . 4) q real?)) q (4709 . 3)) ((c form c (c (? . 1) q check-error)) q (43845 . 3)) ((c def c (c (? . 0) q even?)) q (30083 . 3)) ((c def c (c (? . 2) q caaar)) q (19540 . 3)) ((c def c (c (? . 4) q string-contains?)) q (11333 . 4)) ((c def c (c (? . 0) q char>?)) q (37039 . 5)) ((c def c (c (? . 2) q real-part)) q (18296 . 3)) ((c def c (c (? . 0) q min)) q (31223 . 4)) ((c def c (c (? . 0) q image=?)) q (39885 . 4)) ((c def c (c (? . 2) q char-ci>=?)) q (22500 . 5)) ((c def c (c (? . 4) q string-length)) q (11557 . 3)) ((c form c (c (? . 3) q ....)) q (57882 . 2)) ((c form c (c (? . 2) q ......)) q (13533 . 2)) ((c def c (c (? . 4) q remainder)) q (4760 . 4)) ((c def c (c (? . 1) q >)) q (44634 . 5)) ((c def c (c (? . 2) q >)) q (15642 . 5)) ((c def c (c (? . 3) q andmap)) q (72639 . 4)) ((c form c (c (? . 2) q require)) q (14795 . 2)) ((c form c (c (? . 1) q local)) q (42688 . 2)) ((c def c (c (? . 1) q cos)) q (45256 . 3)) ((c def c (c (? . 0) q replicate)) q (37565 . 4)) ((c def c (c (? . 3) q hash-map)) q (76105 . 4)) ((c def c (c (? . 2) q char>?)) q (23408 . 5)) ((c def c (c (? . 1) q equal~?)) q (55719 . 5)) ((c def c (c (? . 2) q string->symbol)) q (24268 . 3)) ((c form c (c (? . 0) q letrec)) q (27232 . 2)) ((c def c (c (? . 1) q string->symbol)) q (53287 . 3)) ((c def c (c (? . 2) q remove)) q (21492 . 4)) ((c def c (c (? . 1) q string-numeric?)) q (54335 . 3)) ((c def c (c (? . 0) q string=?)) q (39421 . 5)) ((c def c (c (? . 1) q second)) q (50675 . 3)) ((c def c (c (? . 3) q replicate)) q (69031 . 4)) ((c def c (c (? . 4) q explode)) q (9912 . 3)) ((c def c (c (? . 1) q string>=?)) q (54909 . 5)) ((c def c (c (? . 4) q random)) q (4549 . 3)) ((c def c (c (? . 1) q char>?)) q (52427 . 5)) ((c form c (c (? . 0) q cond)) q (27951 . 5)) ((c def c (c (? . 2) q string-upper-case?)) q (25459 . 3)) ((c def c (c (? . 4) q car)) q (6236 . 3)) ((c def c (c (? . 4) q string>?)) q (12352 . 5)) ((c def c (c (? . 4) q posn?)) q (8406 . 3)) ((c def c (c (? . 0) q make-rectangular)) q (31079 . 4)) ((c def c (c (? . 4) q make-list)) q (7233 . 4)) ((c def c (c (? . 4) q assq)) q (5819 . 4)) ((c def c (c (? . 4) q make-polar)) q (3765 . 4)) ((c def c (c (? . 3) q cdaar)) q (64808 . 3)) ((c def c (c (? . 1) q equal?)) q (55648 . 4)) ((c def c (c (? . 0) q char-whitespace?)) q (36608 . 3)) ((c def c (c (? . 4) q false)) q (47 . 2)) ((c form c (c (? . 4) q define-struct)) q (334 . 2)) ((c def c (c (? . 2) q char-downcase)) q (22691 . 3)) ((c form c (c (? . 4) q check-expect)) q (769 . 2)) ((c def c (c (? . 4) q sin)) q (4959 . 3)) ((c def c (c (? . 3) q sgn)) q (63337 . 3)) ((c def c (c (? . 3) q hash-for-each)) q (75933 . 4)) ((c def c (c (? . 3) q false)) q (57836 . 2)) ((c def c (c (? . 3) q first)) q (65414 . 3)) ((c def c (c (? . 1) q argmin)) q (56537 . 4)) ((c form c (c (? . 3) q letrec)) q (58814 . 2)) ((c def c (c (? . 4) q sgn)) q (4886 . 3)) ((c def c (c (? . 0) q empty?)) q (34001 . 3)) ((c def c (c (? . 3) q display)) q (74182 . 3)) ((c def c (c (? . 3) q make-hasheq)) q (76989 . 2)) ((c def c (c (? . 2) q <=)) q (15461 . 5)) ((c def c (c (? . 1) q string-ith)) q (54130 . 4)) ((c def c (c (? . 0) q cos)) q (29868 . 3)) ((c def c (c (? . 1) q cdr)) q (49177 . 3)) ((c def c (c (? . 2) q rational?)) q (18241 . 3)) ((c def c (c (? . 3) q not)) q (63939 . 3)) ((c def c (c (? . 3) q string>?)) q (71088 . 5)) ((c def c (c (? . 3) q list->vector)) q (74908 . 3)) ((c def c (c (? . 0) q char-upcase)) q (36495 . 3)) ((c def c (c (? . 2) q string?)) q (26091 . 3)) ((c def c (c (? . 0) q build-list)) q (41227 . 4)) ((c def c (c (? . 3) q zero?)) q (63701 . 3)) ((c def c (c (? . 1) q explode)) q (52570 . 3)) ((c def c (c (? . 1) q cadr)) q (48798 . 3)) ((c def c (c (? . 2) q exact?)) q (16591 . 3)) ((c def c (c (? . 3) q vector?)) q (75410 . 3)) ((c def c (c (? . 4) q current-seconds)) q (2722 . 2)) ((c def c (c (? . 4) q expt)) q (3053 . 4)) ((c def c (c (? . 3) q <=)) q (60273 . 5)) ((c def c (c (? . 3) q vector-length)) q (75185 . 3)) ((c def c (c (? . 0) q car)) q (33457 . 3)) ((c def c (c (? . 2) q seventh)) q (21705 . 3)) ((c def c (c (? . 2) q integer?)) q (17174 . 3)) ((c def c (c (? . 2) q ceiling)) q (16105 . 3)) ((c def c (c (? . 2) q inexact?)) q (16997 . 3)) ((c def c (c (? . 1) q false?)) q (48067 . 3)) ((c def c (c (? . 2) q sqrt)) q (18743 . 3)) ((c def c (c (? . 3) q list?)) q (65781 . 3)) ((c def c (c (? . 0) q >)) q (29246 . 5)) ((c def c (c (? . 3) q hash-remove)) q (76350 . 4)) ((c def c (c (? . 0) q string-copy)) q (38686 . 3)) ((c def c (c (? . 2) q symbol->string)) q (19179 . 3)) ((c def c (c (? . 1) q expt)) q (45684 . 4)) ((c def c (c (? . 2) q rest)) q (21560 . 3)) ((c def c (c (? . 3) q set-posn-y!)) q (67124 . 4)) ((c def c (c (? . 3) q assoc)) q (64248 . 4)) ((c def c (c (? . 4) q char-upcase)) q (9225 . 3)) ((c def c (c (? . 2) q /)) q (15283 . 5)) ((c def c (c (? . 3) q rest)) q (66518 . 3)) ((c def c (c (? . 1) q number->string)) q (46808 . 3)) ((c def c (c (? . 0) q posn-x)) q (35584 . 3)) ((c def c (c (? . 1) q string-contains?)) q (53991 . 4)) ((c def c (c (? . 2) q char?)) q (23500 . 3)) ((c def c (c (? . 4) q zero?)) q (5250 . 3)) ((c def c (c (? . 3) q lcm)) q (62040 . 4)) ((c def c (c (? . 4) q memq)) q (7456 . 4)) ((c def c (c (? . 1) q list-ref)) q (49769 . 4)) ((c form c (c (? . 3) q check-within)) q (59603 . 2)) ((c def c (c (? . 4) q integer-sqrt)) q (3477 . 3)) ((c def c (c (? . 2) q range)) q (21385 . 5)) ((c form c (c (? . 3) q case)) q (58446 . 2)) ((c def c (c (? . 0) q =)) q (29153 . 5)) ((c def c (c (? . 0) q false)) q (27101 . 2)) ((c def c (c (? . 2) q make-polar)) q (17404 . 4)) ((c def c (c (? . 0) q char-ci<?)) q (35941 . 5)) ((c def c (c (? . 0) q cadddr)) q (33313 . 3)) ((c form c (c (? . 3) q require)) q (59880 . 2)) ((c def c (c (? . 2) q remainder)) q (18399 . 4)) ((c def c (c (? . 2) q abs)) q (15817 . 3)) ((c def c (c (? . 3) q filter)) q (73258 . 4)) ((c def c (c (? . 0) q for-each)) q (41766 . 4)) ((c form c (c (? . 3) q or)) q (59440 . 2)) ((c def c (c (? . 2) q string-numeric?)) q (25316 . 3)) ((c form c (c (? . 1) q let)) q (42846 . 2)) ((c def c (c (? . 0) q complex?)) q (29760 . 3)) ((c def c (c (? . 3) q list-ref)) q (65708 . 4)) ((c def c (c (? . 3) q null)) q (66272 . 2)) ((c def c (c (? . 0) q build-string)) q (41310 . 4)) ((c def c (c (? . 1) q cdar)) q (48987 . 3)) ((c def c (c (? . 1) q angle)) q (44951 . 3)) ((c def c (c (? . 3) q apply)) q (72728 . 5)) ((c def c (c (? . 0) q cons)) q (33835 . 4)) ((c def c (c (? . 2) q string<=?)) q (25589 . 5)) ((c def c (c (? . 0) q first)) q (34101 . 3)) ((c form c (c (? . 1) q quote)) q (43051 . 2)) ((c def c (c (? . 4) q char>=?)) q (9676 . 5)) ((c def c (c (? . 4) q positive?)) q (4417 . 3)) ((c def c (c (? . 2) q cdadr)) q (19969 . 3)) ((c def c (c (? . 1) q char-ci<=?)) q (51233 . 5)) ((c def c (c (? . 3) q cdar)) q (64904 . 3)) ((c def c (c (? . 4) q cos)) q (2625 . 3)) ((c def c (c (? . 1) q first)) q (49489 . 3)) ((c def c (c (? . 0) q reverse)) q (35238 . 3)) ((c def c (c (? . 1) q string-whitespace?)) q (54543 . 3)) ((c def c (c (? . 3) q string-ref)) q (70475 . 4)) ((c def c (c (? . 3) q string-ith)) q (70208 . 4)) ((c def c (c (? . 4) q sinh)) q (5007 . 3)) ((c form c (c (? . 1) q quasiquote)) q (43123 . 2)) ((c def c (c (? . 1) q null?)) q (50353 . 3)) ((c form c (c (? . 2) q or)) q (14355 . 2)) ((c def c (c (? . 3) q inexact?)) q (61809 . 3)) ((c def c (c (? . 3) q log)) q (62116 . 3)) ((c def c (c (? . 3) q make-polar)) q (62216 . 4)) ((c def c (c (? . 4) q real-part)) q (4657 . 3)) ((c def c (c (? . 1) q exit)) q (55944 . 2)) ((c form c (c (? . 2) q check-member-of)) q (14663 . 2)) ((c def c (c (? . 0) q memv)) q (34865 . 4)) ((c form c (c (? . 0) q ...)) q (27136 . 2)) ((c def c (c (? . 0) q real?)) q (31952 . 3)) ((c def c (c (? . 3) q vector)) q (75055 . 3)) ((c def c (c (? . 1) q format)) q (52632 . 4)) ((c def c (c (? . 1) q pi)) q (47030 . 2)) ((c form c (c (? . 2) q unquote-splicing)) q (13769 . 2)) ((c def c (c (? . 3) q integer->char)) q (61864 . 3)) ((c def c (c (? . 1) q sin)) q (47590 . 3)) ((c def c (c (? . 3) q make-immutable-hash)) q (77074 . 2)) ((c def c (c (? . 0) q odd?)) q (31590 . 3)) ((c def c (c (? . 3) q string-length)) q (70293 . 3)) ((c def c (c (? . 0) q abs)) q (29421 . 3)) ((c def c (c (? . 0) q string->int)) q (37702 . 3)) ((c def c (c (? . 3) q integer?)) q (61986 . 3)) ((c def c (c (? . 0) q char?)) q (37131 . 3)) ((c def c (c (? . 2) q char<=?)) q (23038 . 5)) ((c def c (c (? . 2) q identity)) q (26952 . 3)) ((c def c (c (? . 1) q posn-x)) q (50972 . 3)) ((c def c (c (? . 4) q asin)) q (2368 . 3)) ((c def c (c (? . 3) q gensym)) q (72145 . 2)) ((c def c (c (? . 3) q *)) q (72466 . 3)) ((c def c (c (? . 1) q =~)) q (55397 . 5)) ((c def c (c (? . 1) q cdaar)) q (48891 . 3)) ((c def c (c (? . 3) q seventh)) q (66663 . 3)) ((c def c (c (? . 2) q integer->char)) q (17052 . 3)) ((c def c (c (? . 4) q null)) q (7675 . 2)) ((c def c (c (? . 4) q int->string)) q (10100 . 3)) ((c def c (c (? . 3) q >)) q (60454 . 5)) ((c def c (c (? . 0) q sgn)) q (32129 . 3)) ((c def c (c (? . 0) q sixth)) q (35386 . 3)) ((c def c (c (? . 3) q posn?)) q (67003 . 3)) ((c def c (c (? . 0) q memq?)) q (34795 . 4)) ((c def c (c (? . 4) q =)) q (1910 . 5)) ((c def c (c (? . 1) q caaar)) q (48510 . 3)) ((c def c (c (? . 2) q car)) q (19875 . 3)) ((c def c (c (? . 1) q posn?)) q (51064 . 3)) ((c def c (c (? . 2) q cadr)) q (19828 . 3)) ((c form c (c (? . 0) q .....)) q (27159 . 2)) ((c def c (c (? . 3) q char-whitespace?)) q (68074 . 3)) ((c def c (c (? . 3) q cddar)) q (64951 . 3)) ((c form c (c (? . 2) q ...)) q (13497 . 2)) ((c def c (c (? . 0) q negative?)) q (31364 . 3)) ((c def c (c (? . 3) q exact->inexact)) q (61344 . 3)) ((c def c (c (? . 2) q list*)) q (20727 . 4)) ((c form c (c (? . 3) q local)) q (58768 . 2)) ((c def c (c (? . 0) q string-lower-case?)) q (38882 . 3)) ((c def c (c (? . 2) q <)) q (15374 . 5)) ((c def c (c (? . 1) q min)) q (46611 . 4)) ((c def c (c (? . 3) q hash-set!)) q (76604 . 5)) ((c form c (c (? . 1) q define)) q (42926 . 2)) ((c def c (c (? . 2) q positive?)) q (18056 . 3)) ((c def c (c (? . 3) q caaar)) q (64427 . 3)) ((c def c (c (? . 3) q cdr)) q (65094 . 3)) ((c def c (c (? . 2) q cdaar)) q (19921 . 3)) ((c def c (c (? . 2) q empty)) q (13415 . 2)) ((c def c (c (? . 0) q equal?)) q (40260 . 4)) ((c def c (c (? . 2) q add1)) q (15910 . 3)) ((c def c (c (? . 1) q string->list)) q (53147 . 3)) ((c def c (c (? . 2) q char-alphabetic?)) q (22153 . 3)) ((c def c (c (? . 2) q cos)) q (16264 . 3)) ((c def c (c (? . 3) q >=)) q (60541 . 5)) ((c def c (c (? . 0) q cddr)) q (33742 . 3)) ((c def c (c (? . 2) q sgn)) q (18525 . 3)) ((c def c (c (? . 0) q cons?)) q (33901 . 3)) ((c def c (c (? . 1) q image=?)) q (55273 . 4)) ((c form c (c (? . 2) q if)) q (14238 . 2)) ((c def c (c (? . 1) q string<=?)) q (54608 . 5)) ((c def c (c (? . 4) q eighth)) q (6731 . 3)) ((c def c (c (? . 1) q remove)) q (50511 . 4)) ((c def c (c (? . 1) q char?)) q (52519 . 3)) ((c form c (c (? . 3) q lambda)) q (57921 . 2)) ((c def c (c (? . 3) q hash?)) q (76901 . 3)) ((c def c (c (? . 2) q magnitude)) q (17352 . 3)) ((c def c (c (? . 0) q string?)) q (39722 . 3)) ((c def c (c (? . 2) q string<?)) q (25690 . 5)) ((c def c (c (? . 3) q number->string)) q (62628 . 3)) ((c def c (c (? . 0) q integer-sqrt)) q (30720 . 3)) ((c form c (c (? . 1) q unquote)) q (43194 . 2)) ((c def c (c (? . 3) q boolean=?)) q (63753 . 4)) ((c def c (c (? . 4) q length)) q (6977 . 3)) ((c form c (c (? . 3) q match)) q (58615 . 2)) ((c form c (c (? . 3) q define)) q (59006 . 2)) ((c form c (c (? . 0) q if)) q (28115 . 2)) ((c def c (c (? . 4) q char-downcase)) q (9052 . 3)) ((c def c (c (? . 1) q char-ci>=?)) q (51519 . 5)) ((c def c (c (? . 4) q reverse)) q (7968 . 3)) ((c def c (c (? . 1) q string->number)) q (53212 . 3)) ((c def c (c (? . 4) q substring)) q (12505 . 5)) ((c def c (c (? . 3) q empty?)) q (65314 . 3)) ((c def c (c (? . 3) q string-alphabetic?)) q (69424 . 3)) ((c def c (c (? . 1) q string?)) q (55110 . 3)) ((c form c (c (? . 3) q let*)) q (58871 . 2)) ((c def c (c (? . 2) q posn-x)) q (21953 . 3)) ((c def c (c (? . 3) q string-whitespace?)) q (70621 . 3)) ((c def c (c (? . 4) q member)) q (7313 . 4)) ((c def c (c (? . 4) q list*)) q (7088 . 4)) ((c def c (c (? . 3) q random)) q (63000 . 3)) ((c def c (c (? . 3) q remainder)) q (63211 . 4)) ((c def c (c (? . 4) q replicate)) q (10295 . 4)) ((c def c (c (? . 0) q <)) q (28978 . 5)) ((c def c (c (? . 0) q null)) q (34945 . 2)) ((c def c (c (? . 0) q eighth)) q (33952 . 3)) ((c def c (c (? . 0) q apply)) q (40947 . 5)) ((c def c (c (? . 4) q false?)) q (5436 . 3)) ((c def c (c (? . 3) q explode)) q (68648 . 3)) ((c form c (c (? . 2) q ..)) q (13487 . 2)) ((c def c (c (? . 2) q equal?)) q (26629 . 4)) ((c def c (c (? . 2) q cddar)) q (20064 . 3)) ((c def c (c (? . 0) q string->list)) q (37759 . 3)) ((c def c (c (? . 3) q symbol->string)) q (63991 . 3)) ((c def c (c (? . 2) q =~)) q (26378 . 5)) ((c def c (c (? . 1) q exact->inexact)) q (45524 . 3)) ((c def c (c (? . 0) q modulo)) q (31290 . 4)) ((c def c (c (? . 3) q char?)) q (68597 . 3)) ((c def c (c (? . 4) q true)) q (23 . 2)) ((c def c (c (? . 0) q inexact?)) q (30601 . 3)) ((c def c (c (? . 2) q round)) q (18476 . 3)) ((c def c (c (? . 1) q false)) q (42448 . 2)) ((c def c (c (? . 0) q string-upper-case?)) q (39090 . 3)) ((c def c (c (? . 3) q ceiling)) q (60917 . 3)) ((c def c (c (? . 2) q false?)) q (19075 . 3)) ((c def c (c (? . 3) q quicksort)) q (73981 . 4)) ((c def c (c (? . 0) q random)) q (31792 . 3)) ((c def c (c (? . 2) q quotient)) q (18112 . 4)) ((c def c (c (? . 0) q assq)) q (33040 . 4)) ((c def c (c (? . 1) q identity)) q (55971 . 3)) ((c def c (c (? . 0) q sqrt)) q (32347 . 3)) ((c def c (c (? . 1) q string-append)) q (53411 . 3)) ((c def c (c (? . 3) q make-hash)) q (76949 . 2)) ((c def c (c (? . 2) q sixth)) q (21755 . 3)) ((c def c (c (? . 0) q andmap)) q (40858 . 4)) ((c def c (c (? . 3) q argmax)) q (72852 . 4)) ((c def c (c (? . 3) q sqrt)) q (63555 . 3)) ((c form c (c (? . 1) q check-random)) q (43728 . 2)) ((c def c (c (? . 2) q random)) q (18188 . 3)) ((c def c (c (? . 2) q make-rectangular)) q (17475 . 4)) ((c def c (c (? . 1) q posn)) q (50940 . 2)) ((c def c (c (? . 3) q promise?)) q (72226 . 3)) ((c def c (c (? . 1) q string)) q (53035 . 3)) ((c def c (c (? . 4) q seventh)) q (8066 . 3)) ((c def c (c (? . 0) q char-ci>=?)) q (36131 . 5)) ((c def c (c (? . 4) q cons?)) q (6680 . 3)) ((c def c (c (? . 4) q string-copy)) q (11416 . 3)) ((c def c (c (? . 1) q cadar)) q (48653 . 3)) ((c def c (c (? . 4) q char-ci=?)) q (8766 . 5)) ((c def c (c (? . 3) q eighth)) q (65265 . 3)) ((c def c (c (? . 3) q ormap)) q (73839 . 4)) ((c def c (c (? . 4) q cdaar)) q (6282 . 3)) ((c def c (c (? . 2) q *)) q (15030 . 5)) ((c def c (c (? . 4) q modulo)) q (4047 . 4)) ((c def c (c (? . 3) q sleep)) q (72278 . 3)) ((c def c (c (? . 1) q append)) q (48358 . 3)) ((c def c (c (? . 0) q identity)) q (40583 . 3)) ((c def c (c (? . 3) q complex?)) q (60968 . 3)) ((c form c (c (? . 4) q check-range)) q (1090 . 2)) ((c def c (c (? . 4) q angle)) q (2320 . 3)) ((c def c (c (? . 3) q eof-object?)) q (71653 . 3)) ((c def c (c (? . 3) q build-vector)) q (74821 . 4)) ((c def c (c (? . 1) q string-alphabetic?)) q (53346 . 3)) ((c def c (c (? . 1) q sgn)) q (47517 . 3)) ((c def c (c (? . 4) q symbol=?)) q (5599 . 4)) ((c def c (c (? . 1) q procedure?)) q (57534 . 3)) ((c form c (c (? . 3) q if)) q (59323 . 2)) ((c def c (c (? . 0) q symbol?)) q (32917 . 3)) ((c def c (c (? . 1) q odd?)) q (46978 . 3)) ((c def c (c (? . 0) q log)) q (30908 . 3)) ((c def c (c (? . 1) q eqv?)) q (55822 . 4)) ((c def c (c (? . 0) q seventh)) q (35336 . 3)) ((c def c (c (? . 1) q *)) q (56073 . 3)) ((c def c (c (? . 3) q char-upcase)) q (67961 . 3)) ((c def c (c (? . 4) q null?)) q (7695 . 3)) ((c def c (c (? . 1) q char=?)) q (52242 . 5)) ((c def c (c (? . 4) q implode)) q (10049 . 3)) ((c def c (c (? . 1) q list->string)) q (52815 . 3)) ((c def c (c (? . 4) q inexact?)) q (3358 . 3)) ((c def c (c (? . 0) q number?)) q (31479 . 3)) ((c def c (c (? . 3) q image=?)) q (71351 . 4)) ((c def c (c (? . 4) q magnitude)) q (3713 . 3)) ((c def c (c (? . 0) q char->integer)) q (35727 . 3)) ((c def c (c (? . 3) q char-lower-case?)) q (67842 . 3)) ((c def c (c (? . 0) q imag-part)) q (30490 . 3)) ((c form c (c (? . 4) q quote)) q (313 . 2)) ((c form c (c (? . 3) q shared)) q (58273 . 2)) ((c def c (c (? . 4) q make-string)) q (10213 . 4)) ((c def c (c (? . 3) q reverse)) q (66565 . 3)) ((c def c (c (? . 2) q e)) q (16462 . 2)) ((c def c (c (? . 2) q number?)) q (17875 . 3)) ((c form c (c (? . 3) q recur)) q (58328 . 2)) ((c def c (c (? . 0) q posn?)) q (35676 . 3)) ((c def c (c (? . 3) q char-ci<=?)) q (67311 . 5)) ((c def c (c (? . 0) q max)) q (31156 . 4)) ((c def c (c (? . 4) q numerator)) q (4289 . 3)) ((c def c (c (? . 3) q max)) q (62364 . 4)) ((c def c (c (? . 3) q sub1)) q (63604 . 3)) ((c form c (c (? . 0) q and)) q (28178 . 2)) ((c def c (c (? . 2) q zero?)) q (18889 . 3)) ((c def c (c (? . 1) q eof-object?)) q (55523 . 3)) ((c def c (c (? . 4) q string->number)) q (10554 . 3)) ((c form c (c (? . 3) q delay)) q (58246 . 2)) ((c def c (c (? . 3) q current-seconds)) q (61173 . 2)) ((c def c (c (? . 0) q symbol=?)) q (32842 . 4)) ((c def c (c (? . 1) q map)) q (57251 . 4)) ((c def c (c (? . 3) q exp)) q (61456 . 3)) ((c def c (c (? . 1) q real?)) q (47340 . 3)) ((c form c (c (? . 3) q define-struct)) q (59101 . 2)) ((c def c (c (? . 3) q eqv?)) q (71952 . 4)) ((c def c (c (? . 1) q =)) q (44541 . 5)) ((c def c (c (? . 1) q +)) q (56124 . 3)) ((c def c (c (? . 3) q inexact->exact)) q (61750 . 3)) ((c def c (c (? . 4) q char-alphabetic?)) q (8514 . 3)) ((c def c (c (? . 4) q eof)) q (12839 . 2)) ((c def c (c (? . 0) q null?)) q (34965 . 3)) ((c form c (c (? . 0) q check-range)) q (28606 . 2)) ((c def c (c (? . 2) q cadar)) q (19683 . 3)) ((c def c (c (? . 3) q argmin)) q (72930 . 4)) ((c def c (c (? . 0) q eqv?)) q (40434 . 4)) ((c def c (c (? . 1) q string<?)) q (54709 . 5)) ((c def c (c (? . 0) q memq)) q (34726 . 4)) ((c def c (c (? . 4) q tan)) q (5202 . 3)) ((c def c (c (? . 3) q hash-remove!)) q (76433 . 4)) ((c def c (c (? . 4) q acos)) q (2222 . 3)) ((c form c (c (? . 4) q check-member-of)) q (1024 . 2)) ((c def c (c (? . 3) q posn)) q (66879 . 2)) ((c def c (c (? . 2) q angle)) q (15959 . 3)) ((c form c (c (? . 0) q quote)) q (27454 . 2)) ((c form c (c (? . 4) q cond)) q (435 . 5)) ((c def c (c (? . 4) q make-posn)) q (8212 . 4)) ((c def c (c (? . 2) q fifth)) q (20471 . 3)) ((c def c (c (? . 3) q make-list)) q (65830 . 4)) ((c def c (c (? . 1) q modulo)) q (46678 . 4)) ((c def c (c (? . 3) q /)) q (72568 . 4)) ((c def c (c (? . 3) q newline)) q (74229 . 2)) ((c def c (c (? . 3) q string-ci=?)) q (69759 . 5)) ((c def c (c (? . 4) q sqr)) q (5056 . 3)) ((c def c (c (? . 0) q cadar)) q (33265 . 3)) ((c def c (c (? . 2) q -)) q (15212 . 4)) ((c def c (c (? . 1) q reverse)) q (50626 . 3)) ((c def c (c (? . 3) q hash-eq?)) q (75772 . 3)) ((c def c (c (? . 0) q argmax)) q (41071 . 4)) ((c def c (c (? . 0) q char-ci<=?)) q (35845 . 5)) ((c form c (c (? . 4) q ....)) q (93 . 2)) ((c form c (c (? . 3) q begin)) q (58121 . 2)) ((c def c (c (? . 2) q lcm)) q (17228 . 4)) ((c def c (c (? . 1) q implode)) q (52707 . 3)) ((c def c (c (? . 0) q string-whitespace?)) q (39155 . 3)) ((c def c (c (? . 1) q inexact?)) q (45989 . 3)) ((c def c (c (? . 0) q filter)) q (41477 . 4)) ((c def c (c (? . 2) q char-numeric?)) q (22806 . 3)) ((c def c (c (? . 0) q argmin)) q (41149 . 4)) ((c form c (c (? . 0) q define)) q (27684 . 2)) ((c def c (c (? . 3) q unbox)) q (75623 . 3)) ((c def c (c (? . 1) q make-string)) q (52871 . 4)) ((c def c (c (? . 0) q string-ci<?)) q (38190 . 5)) ((c def c (c (? . 3) q format)) q (68710 . 4)) ((c def c (c (? . 3) q with-input-from-string)) q (74539 . 4)) ((c def c (c (? . 2) q char-whitespace?)) q (22977 . 3)) ((c def c (c (? . 0) q round)) q (32080 . 3)) ((c def c (c (? . 3) q numerator)) q (62740 . 3)) ((c def c (c (? . 4) q char->integer)) q (8457 . 3)) ((c def c (c (? . 1) q cddar)) q (49034 . 3)) ((c def c (c (? . 2) q struct?)) q (27001 . 3)) ((c def c (c (? . 3) q string-copy)) q (70152 . 3)) ((c def c (c (? . 0) q e)) q (30066 . 2)) ((c form c (c (? . 1) q or)) q (43620 . 2)) ((c def c (c (? . 3) q range)) q (66343 . 5)) ((c def c (c (? . 2) q char-upcase)) q (22864 . 3)) ((c def c (c (? . 0) q char-numeric?)) q (36437 . 3)) ((c def c (c (? . 4) q caaar)) q (5901 . 3)) ((c def c (c (? . 1) q cons?)) q (49289 . 3)) ((c def c (c (? . 3) q string=?)) q (70887 . 5)) ((c def c (c (? . 1) q cadddr)) q (48701 . 3)) ((c def c (c (? . 4) q string-append)) q (10753 . 3)) ((c def c (c (? . 2) q string-ci>=?)) q (24765 . 5))))
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
âname
syntax
(quoteÂ name)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(*Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(+Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(/Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â integer
Â Â xÂ :Â number
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â 1.0Â 0Â 0.0Â -1Â -1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ xÂ yÂ zÂ ...)Â ->Â list?
Â Â xÂ :Â list?
Â Â yÂ :Â list?
Â Â zÂ :Â list?
procedure
(assqÂ xÂ l)Â ->Â (unionÂ falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn)Â ->Â signature
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(*Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(+Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(/Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â integer
Â Â xÂ :Â number
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â 1.0Â 0Â 0.0Â -1Â -1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ xÂ yÂ zÂ ...)Â ->Â list?
Â Â xÂ :Â list?
Â Â yÂ :Â list?
Â Â zÂ :Â list?
procedure
(assqÂ xÂ l)Â ->Â (unionÂ falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn)Â ->Â signature
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â integer
Â Â xÂ :Â number
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â 1.0Â 0Â 0.0Â -1Â -1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn)Â ->Â signature
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(andmapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(lambdaÂ (variableÂ variableÂ ...)Â expression)
syntax
(Î»Â (variableÂ variableÂ ...)Â expression)
syntax
(expressionÂ expressionÂ expressionÂ ...)
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â integer
Â Â xÂ :Â number
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â 1.0Â 0Â 0.0Â -1Â -1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn)Â ->Â signature
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(andmapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(lambdaÂ (variableÂ ...)Â expression)
syntax
(Î»Â (variableÂ ...)Â expression)
syntax
(expressionÂ expressionÂ ...)
syntax
(define-datatypeÂ dataype-nameÂ [variant-nameÂ field-nameÂ ...]Â ...)
syntax
(beginÂ expressionÂ expressionÂ ...)
syntax
(begin0Â expressionÂ expressionÂ ...)
syntax
(set!Â variableÂ expression)
syntax
(delayÂ expression)
syntax
(sharedÂ ([nameÂ expression]Â ...)Â expression)
syntax
(recurÂ nameÂ ([nameÂ expression]Â ...)Â expression)
syntax
(letÂ nameÂ ([nameÂ expression]Â ...)Â expression)
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expression]Â ...Â [(choiceÂ ...)Â expression])
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expression]Â ...Â [elseÂ expression])
syntax
(matchÂ expressionÂ [patternÂ expression]Â ...)
syntax
(whenÂ test-expressionÂ body-expression)
syntax
(unlessÂ test-expressionÂ body-expression)
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â integer
Â Â xÂ :Â number
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â 1.0Â 0Â 0.0Â -1Â -1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ l)Â ->Â (listofÂ X)
Â Â xÂ :Â X
Â Â lÂ :Â (listofÂ X)
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â (listofÂ any)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn)Â ->Â signature
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-posn-x!Â pÂ x)Â ->Â void?
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(set-posn-y!Â pÂ x)Â ->Â void
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
procedure
(current-milliseconds)Â ->Â exact-integer
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(forceÂ v)Â ->Â any
Â Â vÂ :Â any
procedure
(gensym)Â ->Â symbol?
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(promise?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(sleepÂ sec)Â ->Â void
Â Â secÂ :Â positive-num
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(void)Â ->Â void?
procedure
(void?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(andmapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ l)Â ->Â Y
Â Â fÂ :Â (XÂ YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(displayÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(newline)Â ->Â void
procedure
(pretty-printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printfÂ fÂ xÂ ...)Â ->Â void
Â Â fÂ :Â string
Â Â xÂ :Â any
procedure
(read)Â ->Â sexp
procedure
(with-input-from-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-input-from-stringÂ sÂ p)Â ->Â any
Â Â sÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-stringÂ p)Â ->Â any
Â Â pÂ :Â (->Â any)
procedure
(writeÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(build-vectorÂ nÂ f)Â ->Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(list->vectorÂ l)Â ->Â (vectorofÂ X)
Â Â lÂ :Â (listofÂ X)
procedure
(make-vectorÂ nÂ x)Â ->Â (vectorofÂ X)
Â Â nÂ :Â number
Â Â xÂ :Â X
procedure
(vectorÂ xÂ ...)Â ->Â (vectorÂ XÂ ...)
Â Â xÂ :Â X
procedure
(vector->listÂ v)Â ->Â (listofÂ X)
Â Â vÂ :Â (vectorofÂ X)
procedure
(vector-lengthÂ v)Â ->Â nat
Â Â vÂ :Â (vectorÂ X)
procedure
(vector-refÂ vÂ n)Â ->Â X
Â Â vÂ :Â (vectorÂ X)
Â Â nÂ :Â nat
procedure
(vector-set!Â vÂ nÂ x)Â ->Â void
Â Â vÂ :Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â xÂ :Â X
procedure
(vector?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(boxÂ x)Â ->Â box?
Â Â xÂ :Â any/c
procedure
(box?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-box!Â bÂ x)Â ->Â void
Â Â bÂ :Â box?
Â Â xÂ :Â any/c
procedure
(unboxÂ b)Â ->Â any
Â Â bÂ :Â box?
procedure
(hash-copyÂ h)Â ->Â hash
Â Â hÂ :Â hash
procedure
(hash-countÂ h)Â ->Â integer
Â Â hÂ :Â hash
procedure
(hash-eq?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-equal?Â h)Â ->Â boolean
Â Â hÂ :Â hash?
procedure
(hash-eqv?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-for-eachÂ hÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â any)
procedure
(hash-has-key?Â hÂ x)Â ->Â boolean
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-mapÂ hÂ f)Â ->Â (listofÂ Z)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â Z)
procedure
(hash-refÂ hÂ k)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-ref!Â hÂ kÂ v)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-removeÂ hÂ k)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-remove!Â hÂ x)Â ->Â void
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-setÂ hÂ kÂ v)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-set!Â hÂ kÂ v)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-updateÂ hÂ kÂ f)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash-update!Â hÂ kÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(make-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheqv)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheqv)Â ->Â (hashÂ XÂ Y)
